// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestManager.DataAccess.EFCore;

#nullable disable

namespace RestManager.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RestManager.DataAccess.Models.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsGroupRegistrator")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("RestManager.DataAccess.Models.ClientGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long?>("QueueForTableId")
                        .HasColumnType("bigint");

                    b.Property<long>("RestorantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QueueForTableId")
                        .IsUnique()
                        .HasFilter("[QueueForTableId] IS NOT NULL");

                    b.HasIndex("RestorantId");

                    b.ToTable("ClientGroups");
                });

            modelBuilder.Entity("RestManager.DataAccess.Models.QueueForTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClientGroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("QueueForTableStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("QueuesForTable");
                });

            modelBuilder.Entity("RestManager.DataAccess.Models.Restorant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.ToTable("Restorants");
                });

            modelBuilder.Entity("RestManager.DataAccess.Models.Table", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<long>("RestorantId")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalPlaces")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestorantId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("RestManager.DataAccess.Models.TableRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClientGroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("PlacesToTakeCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestTableStatus")
                        .HasColumnType("int");

                    b.Property<long>("TableId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("WhenGroupGotUpFromTableDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WhenGroupSetAtTableDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientGroupId");

                    b.HasIndex("TableId");

                    b.ToTable("TableRequests");
                });

            modelBuilder.Entity("RestManager.DataAccess.Models.Client", b =>
                {
                    b.HasOne("RestManager.DataAccess.Models.ClientGroup", "Group")
                        .WithMany("Clients")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Group");
                });

            modelBuilder.Entity("RestManager.DataAccess.Models.ClientGroup", b =>
                {
                    b.HasOne("RestManager.DataAccess.Models.QueueForTable", "QueueForTable")
                        .WithOne("ClientGroup")
                        .HasForeignKey("RestManager.DataAccess.Models.ClientGroup", "QueueForTableId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RestManager.DataAccess.Models.Restorant", "Restorant")
                        .WithMany()
                        .HasForeignKey("RestorantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueueForTable");

                    b.Navigation("Restorant");
                });

            modelBuilder.Entity("RestManager.DataAccess.Models.Table", b =>
                {
                    b.HasOne("RestManager.DataAccess.Models.Restorant", "Restorant")
                        .WithMany("Tables")
                        .HasForeignKey("RestorantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restorant");
                });

            modelBuilder.Entity("RestManager.DataAccess.Models.TableRequest", b =>
                {
                    b.HasOne("RestManager.DataAccess.Models.ClientGroup", "ClientGroup")
                        .WithMany("TableRequests")
                        .HasForeignKey("ClientGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestManager.DataAccess.Models.Table", "Table")
                        .WithMany("TableRequests")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientGroup");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("RestManager.DataAccess.Models.ClientGroup", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("TableRequests");
                });

            modelBuilder.Entity("RestManager.DataAccess.Models.QueueForTable", b =>
                {
                    b.Navigation("ClientGroup")
                        .IsRequired();
                });

            modelBuilder.Entity("RestManager.DataAccess.Models.Restorant", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("RestManager.DataAccess.Models.Table", b =>
                {
                    b.Navigation("TableRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
